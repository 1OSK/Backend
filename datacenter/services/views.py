from django.shortcuts import render, get_object_or_404
# Пример данных
services = [
    {
        'id': 1,
        'name': 'Аренда оборудования',
        'price': 3500,
        
        'features': [
            'Быстрый подбор серверов под задачи',
            'Недорогие конфигурации за 2 часа',
            'Инсталляция индивидуальных конфигураций за 2 дня',
            'Широкий выбор серверов Xeon Scalable',
            'Бесплатное подключение к каналу 100 Мбит/с',
            'Помощь в настройке ПО и администрирование',
        ]
    },
    {
        'id': 3,
        'name': 'Размещение оборудования',
        'price': 2650,
        
        'features': [
            'Помощь в переезде и бесплатная инсталляция',
            'Низкая стоимость при поюнитовом размещении',
            'Индивидуальные серверные шкафы на 15 и 22 юнита',
            'Бесплатные кроссировки и коммутация',
            'Хранение ЗИП и оперативная замена комплектующих',
            'Круглосуточный доступ и техническая поддержка',
        ]
    },
    {
        'id': 2,
        'name': 'Аренда серверных стоек',
        'price': 12000,
        
        'features': [
            'Низкая цена аренды',
            'Возможность аренды 1/2 и 1/3 стойки',
            'Помощь в переезде оборудования',
            'Подключение к портам 100 Мбит/с, 1G, 10G',
            'Аренда ОВ/лямбд/транспортных каналов до офиса',
            'Помощь в настройке ПО и администрирование',
        ]
    },
    {
        'id': 4,
        'name': 'Облачные сервисы и решения',
        'price': None,
        
        'features': [
            'Организация SaaS-структуры с нуля',
            'Полный перенос существующей инфраструктуры',
            'Сопровождение проекта после переноса',
            'Возможность организации PaaS-решений',
        ]
    },
]

services_detail = [
    {
        'service_id': 1,
        'image_url': 'http://127.0.0.1:9000/something/1.png',
        'description': [
            'Доступен сразу после оплаты',
            'Бесплатная техподдержка',
            'KVM﻿-﻿консоль и API',
            'Связанность с Cloud﻿-﻿IX.net',
        ],
        
    'additional_text': 'Аренда серверных мощностей под проекты любой сложности. Стоимость аренды физического сервера в месяц представлена в каталоге ниже. Готовые конфигурации тестируются под нагрузкой и только после этого передается в эксплуатацию, что исключает факт передачи устаревшего или ненадежного оборудования.',
    },
    {
        'service_id': 3,
        'image_url': 'http://127.0.0.1:9000/something/3.png',
        'description': [
            'Бесплатно доставим ваше оборудование из регионов, инсталлируем и подключим к сети Интернет.',
            'Предоставим отличную связанность и гарантируем короткий ping за счет стыков более чем с 540 операторами связи.',
            'Расчет энергопотребления зависит от выбранного вами ЦОД (Москва, Санкт-Петербург, Екатеринбург).',
      ],
        
    'additional_text': '',
    },
    {
        'service_id': 2,
        'image_url': 'http://127.0.0.1:9000/something/2.png',
        'description': [
            'Server Rack — 42–47 U с возможностью электроснабжения до 8 кВт.',
            'Обеспечение оптимального температурного режима +22±2°С.',
            'Техническая поддержка 24/7 с услугой Remote Hands («Удаленные руки»).',
            'Помощь в транспортировке оборудования в ЦОД и установке в стойку.',
            'Помощь в коммутации и запуске оборудования.',
            'SLA 99.99% с финансовой гарантией.',
        ],
        
    'additional_text': 'Аренда серверной стойки — услуга, которая позволяет использовать все 42–47 юнитов.Вы получаете: стык с более чем 540 операторами связи, высокий уровень безопасности, эффективную систему энергообеспечения, гарантированные климатические условия, возможность создания и дополнения необходимых кроссировок и коммутаций и квалифицированную техническую поддержку.',
    },
    {
        'service_id': 4,
        'image_url': 'http://127.0.0.1:9000/something/4.png',
        'description': [
            'Организация SaaS-структуры с нуля',
            'Полный перенос существующей инфраструктуры',
            'Сопровождение проекта после переноса',
            'Возможность организации PaaS-решений',
        ],
        
     'additional_text': 'Облачное администрирование состоит из сервисов миграции в облако, сопровождения облачного проекта и решения оперативных задач. Миграция в облако включает сбор данных и аудит текущей инфраструктуры заказчика, подготовку технологической платформы и выделение вычислительных мощностей, непосредственно перенос (копирование) данных, разворачивание и настройку приложений. Сопровождение облачного проекта включает поддержку существующей инфраструктуры и выполнение плановых работ с приложениями и сервисами. В оперативные задачи входят модернизация инфраструктуры, глобальная переработка сетевых настроек, внедрение новых компонентов и сервисов, выполнение разовых и срочных работ. Услуга оказывается с участием опытных системных администраторов и DevOps-инженеров, реализовавших множество успешных кейсов. Затраты на удаленное администрирование ниже, чем включение специалиста с соответствующими компетенциями в штатное расписание.',
    },
]

requests = [
    {'id': 1, 'services': [1, 2]}, 
]
def service_list(request):
    # Извлекаем поисковой запрос и запрос по цене из параметров GET
    search_query = request.GET.get('q', '')  # Поисковый запрос по имени услуги
    price_query = request.GET.get('price', '')  # Запрос по максимальной цене

    # Выводим в консоль фильтры, которые применяются
    print(f"Фильтр по имени: {search_query}") 
    print(f"Фильтр по максимальной цене: {price_query}") 

    # Изначально устанавливаем все услуги в качестве фильтрованных
    filtered_services = services

    # Применяем фильтрацию по имени услуги
    if search_query:
        filtered_services = [s for s in filtered_services if search_query.lower() in s['name'].lower()]

    # Применяем фильтрацию по цене
    if price_query:
        try:
            price_value = int(price_query)  # Преобразуем цену в целое число
            filtered_services = [s for s in filtered_services if s['price'] and s['price'] <= price_value]
        except ValueError:
            pass  # Игнорируем ошибки преобразования цены

    # Устанавливаем ID заявки для получения информации о заявке
    request_id = 1  
    user_request = next((r for r in requests if r['id'] == request_id), None)
    request_services_count = len(user_request['services']) if user_request else 0

    # Выводим в консоль информацию о заявке
    print(f"ID заявки: {request_id}")  
    print(f"Количество услуг в заявке: {request_services_count}") 

    # Выводим ID услуг, входящих в заявку
    if user_request:
        print(f"ID услуг в заявке: {user_request['services']}") 
    else:
        print("Услуги в заявке не найдены.")  

    # Возвращаем отфильтрованные услуги и информацию о заявке для рендеринга шаблона
    return render(request, 'services/service_list.html', {
        'services': filtered_services,
        'request_id': request_id,
        'request_services_count': request_services_count,
        'search_query': search_query,  # Передаем поисковый запрос для сохранения в поле ввода
        'price_query': price_query,  # Передаем запрос по цене для сохранения в поле ввода
    })
    
def service_detail(request, service_id):
    """
    Представление для отображения деталей одной услуги.
    """
    # Извлекаем услугу и её детали по ID
    service = next((s for s in services if s['id'] == service_id), None)
    detail = next((d for d in services_detail if d['service_id'] == service_id), None)
    
    # Если услуга или её детали не найдены, возвращаем 404 ошибку
    if not service or not detail:
        return get_object_or_404(service)

    # Возвращаем данные для рендеринга шаблона детали услуги
    return render(request, 'services/service_detail.html', {
        'service': service,
        'detail': detail
    })

def request_detail(request, request_id):
    """
    Представление для отображения деталей одной заявки (корзины).
    """
    # Извлекаем заявку и услуги, связанные с этой заявкой по ID
    user_request = next((r for r in requests if r['id'] == request_id), None)
    if user_request:
        request_services = [s for s in services if s['id'] in user_request['services']]
    else:
        request_services = []
        
    # Возвращаем данные для рендеринга шаблона деталей заявки
    return render(request, 'services/request_detail.html', {'request': user_request, 'services': request_services})